// Generated by gencpp from file xbee/script_ctrl.msg
// DO NOT EDIT!


#ifndef XBEE_MESSAGE_SCRIPT_CTRL_H
#define XBEE_MESSAGE_SCRIPT_CTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xbee
{
template <class ContainerAllocator>
struct script_ctrl_
{
  typedef script_ctrl_<ContainerAllocator> Type;

  script_ctrl_()
    : script_ctrls()  {
      script_ctrls.assign(0);
  }
  script_ctrl_(const ContainerAllocator& _alloc)
    : script_ctrls()  {
  (void)_alloc;
      script_ctrls.assign(0);
  }



   typedef boost::array<uint8_t, 5>  _script_ctrls_type;
  _script_ctrls_type script_ctrls;





  typedef boost::shared_ptr< ::xbee::script_ctrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xbee::script_ctrl_<ContainerAllocator> const> ConstPtr;

}; // struct script_ctrl_

typedef ::xbee::script_ctrl_<std::allocator<void> > script_ctrl;

typedef boost::shared_ptr< ::xbee::script_ctrl > script_ctrlPtr;
typedef boost::shared_ptr< ::xbee::script_ctrl const> script_ctrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xbee::script_ctrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xbee::script_ctrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xbee::script_ctrl_<ContainerAllocator1> & lhs, const ::xbee::script_ctrl_<ContainerAllocator2> & rhs)
{
  return lhs.script_ctrls == rhs.script_ctrls;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xbee::script_ctrl_<ContainerAllocator1> & lhs, const ::xbee::script_ctrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xbee

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xbee::script_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbee::script_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbee::script_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbee::script_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbee::script_ctrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbee::script_ctrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xbee::script_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4ceca9c837a67ee537847b65bec8a91";
  }

  static const char* value(const ::xbee::script_ctrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4ceca9c837a67eeULL;
  static const uint64_t static_value2 = 0x537847b65bec8a91ULL;
};

template<class ContainerAllocator>
struct DataType< ::xbee::script_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xbee/script_ctrl";
  }

  static const char* value(const ::xbee::script_ctrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xbee::script_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Message where each sub command from csv script is published into\n"
"\n"
"uint8[5] script_ctrls\n"
;
  }

  static const char* value(const ::xbee::script_ctrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xbee::script_ctrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.script_ctrls);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct script_ctrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xbee::script_ctrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xbee::script_ctrl_<ContainerAllocator>& v)
  {
    s << indent << "script_ctrls[]" << std::endl;
    for (size_t i = 0; i < v.script_ctrls.size(); ++i)
    {
      s << indent << "  script_ctrls[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.script_ctrls[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // XBEE_MESSAGE_SCRIPT_CTRL_H
