// Generated by gencpp from file xbox/op.msg
// DO NOT EDIT!


#ifndef XBOX_MESSAGE_OP_H
#define XBOX_MESSAGE_OP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xbox
{
template <class ContainerAllocator>
struct op_
{
  typedef op_<ContainerAllocator> Type;

  op_()
    : esc(0)
    , bp(0)
    , daq(0)
    , wrt(0)
    , cp(0)
    , rvm(0)
    , abort(0)  {
    }
  op_(const ContainerAllocator& _alloc)
    : esc(0)
    , bp(0)
    , daq(0)
    , wrt(0)
    , cp(0)
    , rvm(0)
    , abort(0)  {
  (void)_alloc;
    }



   typedef uint8_t _esc_type;
  _esc_type esc;

   typedef uint8_t _bp_type;
  _bp_type bp;

   typedef uint8_t _daq_type;
  _daq_type daq;

   typedef uint8_t _wrt_type;
  _wrt_type wrt;

   typedef uint8_t _cp_type;
  _cp_type cp;

   typedef uint8_t _rvm_type;
  _rvm_type rvm;

   typedef uint8_t _abort_type;
  _abort_type abort;





  typedef boost::shared_ptr< ::xbox::op_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xbox::op_<ContainerAllocator> const> ConstPtr;

}; // struct op_

typedef ::xbox::op_<std::allocator<void> > op;

typedef boost::shared_ptr< ::xbox::op > opPtr;
typedef boost::shared_ptr< ::xbox::op const> opConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xbox::op_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xbox::op_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xbox::op_<ContainerAllocator1> & lhs, const ::xbox::op_<ContainerAllocator2> & rhs)
{
  return lhs.esc == rhs.esc &&
    lhs.bp == rhs.bp &&
    lhs.daq == rhs.daq &&
    lhs.wrt == rhs.wrt &&
    lhs.cp == rhs.cp &&
    lhs.rvm == rhs.rvm &&
    lhs.abort == rhs.abort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xbox::op_<ContainerAllocator1> & lhs, const ::xbox::op_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xbox

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xbox::op_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbox::op_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox::op_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox::op_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox::op_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox::op_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xbox::op_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce1000fdad5bdc47b754e81eac323f68";
  }

  static const char* value(const ::xbox::op_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce1000fdad5bdc47ULL;
  static const uint64_t static_value2 = 0xb754e81eac323f68ULL;
};

template<class ContainerAllocator>
struct DataType< ::xbox::op_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xbox/op";
  }

  static const char* value(const ::xbox::op_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xbox::op_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message files for all of the switch commands for the MQS\n"
"\n"
"uint8 esc  #turn on/off the esc's\n"
"uint8 bp   #turn on/off the bilge pump\n"
"uint8 daq  #turn on/off the DAQ\n"
"uint8 wrt  #raise and lower the wheel retraction\n"
"uint8 cp   #turn on/off the cooling pumps for the ESC's\n"
"uint8 rvm  #hold to engage reverse mode for marine\n"
"uint8 abort #abort joystick operation. Change over to transmitter on arduino\n"
;
  }

  static const char* value(const ::xbox::op_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xbox::op_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.esc);
      stream.next(m.bp);
      stream.next(m.daq);
      stream.next(m.wrt);
      stream.next(m.cp);
      stream.next(m.rvm);
      stream.next(m.abort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct op_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xbox::op_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xbox::op_<ContainerAllocator>& v)
  {
    s << indent << "esc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.esc);
    s << indent << "bp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bp);
    s << indent << "daq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.daq);
    s << indent << "wrt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrt);
    s << indent << "cp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cp);
    s << indent << "rvm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rvm);
    s << indent << "abort: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.abort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XBOX_MESSAGE_OP_H
