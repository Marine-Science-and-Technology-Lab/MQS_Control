// Generated by gencpp from file xbox/land.msg
// DO NOT EDIT!


#ifndef XBOX_MESSAGE_LAND_H
#define XBOX_MESSAGE_LAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xbox
{
template <class ContainerAllocator>
struct land_
{
  typedef land_<ContainerAllocator> Type;

  land_()
    : fwd(0.0)
    , rev(0.0)
    , strl(0.0)  {
    }
  land_(const ContainerAllocator& _alloc)
    : fwd(0.0)
    , rev(0.0)
    , strl(0.0)  {
  (void)_alloc;
    }



   typedef float _fwd_type;
  _fwd_type fwd;

   typedef float _rev_type;
  _rev_type rev;

   typedef float _strl_type;
  _strl_type strl;





  typedef boost::shared_ptr< ::xbox::land_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xbox::land_<ContainerAllocator> const> ConstPtr;

}; // struct land_

typedef ::xbox::land_<std::allocator<void> > land;

typedef boost::shared_ptr< ::xbox::land > landPtr;
typedef boost::shared_ptr< ::xbox::land const> landConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xbox::land_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xbox::land_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xbox::land_<ContainerAllocator1> & lhs, const ::xbox::land_<ContainerAllocator2> & rhs)
{
  return lhs.fwd == rhs.fwd &&
    lhs.rev == rhs.rev &&
    lhs.strl == rhs.strl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xbox::land_<ContainerAllocator1> & lhs, const ::xbox::land_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xbox

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xbox::land_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbox::land_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox::land_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbox::land_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox::land_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbox::land_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xbox::land_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edaf8b5219d5128d3faa0e4ddabb09c7";
  }

  static const char* value(const ::xbox::land_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedaf8b5219d5128dULL;
  static const uint64_t static_value2 = 0x3faa0e4ddabb09c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::xbox::land_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xbox/land";
  }

  static const char* value(const ::xbox::land_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xbox::land_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message file for land control commands\n"
"\n"
"float32 fwd\n"
"float32 rev\n"
"float32 strl\n"
;
  }

  static const char* value(const ::xbox::land_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xbox::land_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fwd);
      stream.next(m.rev);
      stream.next(m.strl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct land_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xbox::land_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xbox::land_<ContainerAllocator>& v)
  {
    s << indent << "fwd: ";
    Printer<float>::stream(s, indent + "  ", v.fwd);
    s << indent << "rev: ";
    Printer<float>::stream(s, indent + "  ", v.rev);
    s << indent << "strl: ";
    Printer<float>::stream(s, indent + "  ", v.strl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XBOX_MESSAGE_LAND_H
